
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"Хрусталев Влад Николаевич - 19 лет, студент 2ого курса, группа НПИбд-02-22. На данный момент одним из моих главных интересов явлется программирование.\n","date":1685145602,"expirydate":-62135596800,"kind":"term","lang":"ru","lastmod":1685145602,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Хрусталев Влад Николаевич - 19 лет, студент 2ого курса, группа НПИбд-02-22. На данный момент одним из моих главных интересов явлется программирование.","tags":null,"title":"Влад Хрусталев","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature. Slides can be added in a few ways:\nCreate slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://bezura.github.io/ru/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/talk/example-talk/","section":"event","summary":"An kurs talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":null,"categories":null,"content":"На этой странице можно увидеть мое решение курса на Stepik “Основы кибербезопасности”. Запись выполнения доступна на YouTube:\nчасть 1 + часть 2 + часть 3 По прохождению курса не выдается сертификат, подтверждением прохождения является следующий скриншот в оглавлении.\n","date":1715990400,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1715990400,"objectID":"359c348176c11e06702449363a2b8ae7","permalink":"https://bezura.github.io/ru/project/kurs/","publishdate":"2024-05-18T00:00:00Z","relpermalink":"/ru/project/kurs/","section":"project","summary":"Курс Stepik \"Основы кибербезопасности\"","tags":["STEPIC"],"title":"Курс Stepik \"Основы кибербезопасности\"","type":"project"},{"authors":["Влад Хрусталев"],"categories":["Demo"],"content":"import libr print(\u0026#39;hello\u0026#39;) Работа с библиографией\nСоздание надежной и аккуратной библиографии является неотъемлемой частью успешной научной работы. Это позволяет читателям проверить ваши источники, а также обеспечивает вас защитой от обвинений в плагиате. В этом посте мы рассмотрим некоторые важные аспекты работы с библиографией и предоставим вам полезные советы.\n1. Выберите правильный стиль цитирования Существует множество стилей цитирования, таких как APA, MLA, Chicago и другие. Важно выбрать тот, который соответствует требованиям вашей области знаний или научного журнала, в котором вы планируете публиковаться. Каждый стиль имеет свои особенности относительно формата цитирования и оформления списка литературы.\n2. Используйте менеджеры библиографии Существуют различные программы и онлайн-сервисы для управления библиографическими данными, такие как Zotero, Mendeley, EndNote и другие. Они позволяют вам организовывать и хранить цитаты и полные библиографические данные, а также автоматически создавать списки литературы в нужном стиле. Использование менеджера библиографии упрощает процесс цитирования и минимизирует риск ошибок.\n3. Ведите библиографическую запись для каждого источника При работе с литературой ведите аккуратную библиографическую запись для каждого источника, который вы используете. Запись должна содержать все необходимые данные, такие как авторы, название статьи или книги, год издания, издательство и т.д. Это поможет вам легко ссылаться на источники в тексте и создавать правильные цитаты.\n4. Проверяйте точность и полноту Перед тем, как представить свою работу, важно проверить точность и полноту вашей библиографии. Убедитесь, что все источники правильно отформатированы в соответствии с выбранным стилем цитирования. Также проверьте, что вы не упустили ни одного использованного источника и что все цитаты в тексте имеют соответствующие\nзаписи в списке литературы.\n5. Будьте последовательными Важно быть последовательными в оформлении библиографии. Следуйте выбранному стилю цитирования на протяжении всей работы. Проверьте, что вы используете одинаковые форматы для разных типов источников (книги, журнальные статьи, веб-страницы и т.д.). Это поможет создать профессиональное и качественное впечатление от вашей работы.\nНадеюсь, эти советы помогут вам в работе с библиографией. Четкая и правильно оформленная библиография способствует улучшению качества вашей научной работы и делает ее более убедительной для читателей и рецензентов.\nПоделитесь своими мыслями и опытом работы с библиографией в комментариях ниже!\nDisclaimer: Убедитесь, что вы проверяете требования вашего учебного заведения или научного журнала для конкретных правил оформления библиографии. Стили цитирования и требования могут различаться.\n","date":1685145602,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1685145602,"objectID":"861159405bc8a963f2640b04dd53d937","permalink":"https://bezura.github.io/ru/post/biblic/","publishdate":"2023-05-27T00:00:02Z","relpermalink":"/ru/post/biblic/","section":"post","summary":"Работа с библиографией","tags":["Academic"],"title":"Работа с библиографией","type":"post"},{"authors":["Влад Хрусталев"],"categories":["Demo"],"content":"import libr print(\u0026#39;hello\u0026#39;) Arduino - это платформа для разработки электронных проектов, которая позволяет создавать устройства и автоматизированные системы с помощью микроконтроллера. Если вы интересуетесь электроникой и программированием, Arduino может быть отличным выбором для ваших творческих и инженерных идей. В этом посте мы рассмотрим некоторые ключевые аспекты разработки проектов на Arduino.\n1. Изучите основы Arduino Прежде чем приступить к разработке проектов на Arduino, важно изучить основы платформы. Ознакомьтесь с аппаратными компонентами Arduino, такими как платы, микроконтроллеры, порты ввода-вывода и т.д. Также изучите язык программирования Arduino, основанный на языке C++. Понимание основных понятий и функций Arduino поможет вам создавать проекты более эффективно.\n2. Выберите подходящую платформу Arduino На рынке существует множество различных платформ Arduino, каждая из которых имеет свои особенности и характеристики. Выберите платформу Arduino, которая лучше всего соответствует вашим потребностям и требованиям проекта. Разные платформы могут отличаться по мощности, размерам, доступности аналоговых и цифровых портов и другим параметрам.\n3. Подберите необходимые компоненты В зависимости от вашего проекта, вам потребуются различные электронные компоненты, такие как резисторы, датчики, дисплеи, моторы и т.д. Создайте список необходимых компонентов и приобретите их. Обратите внимание на совместимость компонентов с выбранной платформой Arduino.\n4. Начните с простых проектов Если вы новичок в разработке на Arduino, рекомендуется начать с простых проектов. Например, светодиодные индикаторы, кнопки, звуковые сигналы или управление моторами. Это поможет вам освоить базовые принципы работы с Arduino и программирования.\n5. Изучите примеры и библиотеки Arduino имеет обширную библиотеку и множество примеров проектов, которые могут быть использованы в вашей разработке. Изуч\nите доступные примеры и библиотеки, чтобы узнать, какие функции и возможности уже реализованы и могут быть использованы в ваших проектах. Это позволит вам экономить время и улучшить эффективность разработки.\n6. Продолжайте экспериментировать и учиться Arduino предлагает бесконечные возможности для творчества и инженерных проектов. Продолжайте экспериментировать, создавать новые проекты и углублять свои знания. Используйте онлайн-ресурсы, форумы и сообщества Arduino для обмена опытом и получения поддержки.\nНадеюсь, эти советы помогут вам начать разрабатывать проекты на Arduino. Помните, что творческий подход и настойчивость играют важную роль в достижении успеха. Удачи в вашей разработке на Arduino!\nПоделитесь своими проектами и опытом работы с Arduino в комментариях ниже!\nDisclaimer: Убедитесь, что вы следуете соответствующим правилам безопасности и руководствам при работе с электричеством и компонентами Arduino.\n","date":1685145602,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1685145602,"objectID":"a06327afcedcebacc1ea72ec5b4912f4","permalink":"https://bezura.github.io/ru/post/arduino/","publishdate":"2023-05-27T00:00:02Z","relpermalink":"/ru/post/arduino/","section":"post","summary":"Разработка проектов на Arduino","tags":["Academic"],"title":"Разработка проектов на Arduino","type":"post"},{"authors":["Влад Хрусталев"],"categories":["Demo"],"content":"import libr print(\u0026#39;hello\u0026#39;) Языки Научного программирования Научное программирование - это область, в которой используются компьютерные языки и технологии для решения научных задач, таких как анализ данных, моделирование физических процессов, машинное обучение и другие. Существует множество языков программирования, которые подходят для научных целей, но некоторые из них более популярны и распространены, чем другие. В этом посте я расскажу о трех таких языках: Python, R и Julia.\nPython Python - это высокоуровневый интерпретируемый язык программирования с динамической типизацией и множеством библиотек для научных вычислений. Python прост в изучении и использовании, имеет чистый и понятный синтаксис, поддерживает многопарадигменное программирование (объектно-ориентированное, функциональное, процедурное и т.д.) и имеет большое сообщество разработчиков и пользователей. Среди наиболее известных библиотек для научного программирования на Python можно назвать NumPy, SciPy, Pandas, Matplotlib, Scikit-learn и TensorFlow.\nR R - это язык программирования и среда для статистического анализа и визуализации данных. R создан специально для работы с данными и имеет множество встроенных функций и пакетов для этого. R также поддерживает различные типы графиков и диаграмм, которые можно легко создавать и настраивать. R является интерпретируемым языком с динамической типизацией и функциональной парадигмой программирования. Среди популярных пакетов для научного программирования на R можно упомянуть Tidyverse, ggplot2, Shiny и R Markdown.\nJulia Julia - это относительно новый язык программирования, разработанный с целью сочетать скорость исполнения низкоуровневых языков (например, C или Fortran) с выразительностью и удобством высокоуровневых языков (например, Python или R). Julia компилируется в машинный код перед исполнением и имеет мощную систему множественной диспетчеризации (multiple dispatch), которая позволяет определять поведение функций в зависимости от типов и количества аргументов. Julia также поддерживает метапрограммирование, параллельное и распределенное вычисление, интероперабельность с другими языками и богатый набор библиотек для научного программирования. Среди них можно выделить Plots, DataFrames, Flux и DifferentialEquations.\nЗаключение Языки научного программирования - это инструменты, которые помогают ученым и инженерам решать сложные задачи в различных областях знания. Выбор языка зависит от конкретной задачи.\n","date":1683936062,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1683936062,"objectID":"fbf4628eb2e4d8dd913775c317857663","permalink":"https://bezura.github.io/ru/post/scientific_programming_languages/","publishdate":"2023-05-13T00:01:02Z","relpermalink":"/ru/post/scientific_programming_languages/","section":"post","summary":"Языки Научного программирования","tags":["Academic"],"title":"Языки Научного программирования","type":"post"},{"authors":["Влад Хрусталев"],"categories":["Demo"],"content":"import libr print(\u0026#39;hello\u0026#39;) Как я провел прошедшую неделю Привет, друзья! Я хочу рассказать вам, как я провел неделю в своем родном городе. Это было замечательно!\nВ пятницу я приехал к своей семье и мы долго общались за ужином. Они были очень рады меня видеть и устроили мне теплый прием.\nВ субботу я встретился со своими друзьями из школы. Мы собрались в нашем любимом кафе и поговорили за чашкой кофе. Мы обменялись своими впечатлениями, смеялись над старыми шутками, вспоминали наши приключения и мечты. Мы также посетили нашу школу и нашего классного руководителя.\nВ воскресенье я провел день с семьей на природе. Мы поехали на пикник на берегу реки. Погода была прекрасная: солнечно, тепло и свежо. Мы наслаждались красотой природы, катались на велосипедах, играли в мяч, ловили рыбу, купались в реке.\nВ понедельник я начал готовиться к отъезду. Я собрал свои вещи, подарил своей семье сувениры из города, где я учусь, поблагодарил их за все, что они для меня делают.\nЯ очень рад, что смог посетить свой родной город и провести время с близкими людьми. Это была одна из самых запоминающихся и приятных недель в моей жизни!\n","date":1683936000,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1683936000,"objectID":"b5aa8cda2ead19ee1630c118fae5c5ac","permalink":"https://bezura.github.io/ru/post/my_last_week-_3/","publishdate":"2023-05-13T00:00:00Z","relpermalink":"/ru/post/my_last_week-_3/","section":"post","summary":"Недельный отчёт _3_.","tags":["Academic"],"title":"Недельный отчёт _3_.","type":"post"},{"authors":["Влад Хрусталев"],"categories":["Demo"],"content":"import libr print(\u0026#39;hello\u0026#39;) Что такое Markdown Markdown — язык текстовой разметки, созданный писателем и блогером Джоном Грубером. Он предназначен для создания красиво оформленных текстов в обычных файлах формата TXT. Вам не нужны громоздкие процессоры вроде Word или Pages, чтобы создавать документы с жирным или курсивным начертанием, цитатами, ссылками и даже таблицами. Достаточно запомнить простые правила Markdown, и можно писать хоть в «Блокноте». Хотя специализированные Markdown-редакторы, конечно, намного удобнее.\nЭтот язык разметки используется блогерами, писателями, редакторами и журналистами по всему миру. Всем, кто так или иначе связан с упомянутыми профессиями, будет полезно знать о нём.\nГде можно использовать Markdown Заметки Редактор Markdown с файловой панелью (например, Atom или iA Writer) — это вполне достойная альтернатива Evernote и OneNote. Мы уже писали, почему Markdown хорош для организации вашей базы заметок.\nЧерновики для блога Этот язык разметки совместим с кучей онлайн-редакторов и блог-платформ. Можно написать черновик для своего блога в Markdown, а потом опубликовать его за секунды — все ссылки, заголовки и форматирование будут выглядеть так, как вы и задумывали. Это вам не из Word копировать.\nСписки задач В Markdown-редакторах очень просто создавать списки покупок, дел и рабочих заданий. Некоторые гики используют обычный текстовый файл todo.txt как альтернативу модным Wunderlist и Todoist. Как это сделать, можно узнать на сайте Todo.txt.\nМессенджеры Даже некоторые мессенджеры поддерживают Markdown. Например, в Telegram вы с его помощью можете применить жирное или курсивное выделение.\nПреимущества Markdown Универсальность Документы, написанные с использованием синтаксиса Markdown, представляют собой обычные текстовые файлы TXT. Их можно открыть на любой платформе и в любом редакторе. Этим они выгодно отличаются от файлов, созданных в текстовых процессорах. Пробовали открыть документ из Apple Pages в Word?\nПростота Markdown настолько прост, что его за 10 минут смогут освоить даже те, кто до этого не слышал про все эти ваши Latex и HTML. Решётки для подзаголовков, звёздочки для выделения, тире для списков. Проще быть не может.\nБольшой выбор инструментов Редакторов для работы с документами Markdown очень, очень много. Есть и онлайновые, и мобильные, и настольные инструменты. Есть монструозный Atom, красивые и минималистичные ghostwriter и iA Writer, Vim для гиков и Ulysses для профессиональных писателей. Выбирай не хочу.\nКонвертируемость Документы Markdown легко экспортировать в любые форматы: PDF, DOC, ODT. При этом их форматирование остаётся неизменным.\n","date":1680912002,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1680912002,"objectID":"bd238f54b82fdcd586f8f7e438599565","permalink":"https://bezura.github.io/ru/post/markdown/","publishdate":"2023-04-08T00:00:02Z","relpermalink":"/ru/post/markdown/","section":"post","summary":"Язык разметки Markdown","tags":["Academic"],"title":"Язык разметки Markdown","type":"post"},{"authors":["Влад Хрусталев"],"categories":["Demo"],"content":"import libr print(\u0026#39;hello\u0026#39;) Начало Да-да… Неожиданно даже для меня, что второй такой пост. Но, к сожалению или счастью, это не мои прихоти(лаба, это всё она…). Что же с неделей, всё замечательно, приближается лето, погодка супер) Желаю всем счастья!!!\n","date":1680912000,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1680912000,"objectID":"c64e218ec3eb7b40906186934bd90fd0","permalink":"https://bezura.github.io/ru/post/my_last_week-_2/","publishdate":"2023-04-08T00:00:00Z","relpermalink":"/ru/post/my_last_week-_2/","section":"post","summary":"Как прошла моя последняя неделя??","tags":["Academic"],"title":"Недельный отчёт(УЖЕ ВТОРОЙ!!!).","type":"post"},{"authors":["Влад Хрусталев"],"categories":["Demo"],"content":"import libr print(\u0026#39;hello\u0026#39;) Системы контроля версий.Общие понятия Системы контроля версий (Version Control System,VCS) применяются при работе нескольких человек над одним проектом.Обычно основное дерево про- екта хранится в локальном или удалённом репозитории,к которому настроен доступдля участников проекта.При внесении изменений в содержание проекта система контроля версий позволяет их фиксировать, совмещать изменения, произведённые разными участниками проекта, производить откат к любой более ранней версии проекта,если это требуется.\nВ классических системах контроля версий используется централизованная модель,предполагающая наличие единого репозитория для хранения файлов. Выполнение большинства функций по управлению версиями осуществляется специальнымсервером.Участникпроекта(пользователь)передначаломработы посредствомопределённыхкомандполучаетнужнуюемуверсиюфайлов.После внесения изменений,пользователь размещает новую версию в хранилище.При этом предыдущие версии не удаляются из центрального хранилища и к ним можно вернуться в любой момент.Сервер может сохранять не полную версию изменённых файлов,а производитьтак называемую дельта-компрессию—со- хранятьтолько изменения между последовательными версиями,что позволяет уменьшить объём хранимых данных.\nСистемы контроля версий поддерживаютвозможностьотслеживания и разре- шения конфликтов,которые могут возникнуть при работе нескольких человек над одним файлом.Можно объединить (слить) изменения,сделанные разными участниками (автоматически или вручную),вручную выбрать нужную версию, отменить изменения вовсе или заблокировать файлы для изменения.В зависи- мости от настроек блокировка не позволяетдругим пользователям получить рабочую копию или препятствует изменению рабочей копии файла средствами файловой системы ОС,обеспечиваятаким образом,привилегированныйдоступ только одному пользователю,работающему с файлом.\nСистемы контроля версий также могут обеспечивать дополнительные,более гибкие функциональные возможности. Например, они могут поддерживать работу с несколькими версиями одного файла,сохраняя общую историю изме- нений до точки ветвления версий и собственные истории изменений каждой ветви.Кроме того,обычно доступна информация о том,кто из участников,ко- гда и какие изменения вносил. Обычно такого рода информация хранится в журнале изменений,доступ к которому можно ограничить.\nВ отличие от классических,в распределённых системах контроля версий цен- тральный репозиторий не является обязательным.\nСреди классических VCS наиболее известны CVS,Subversion,а среди распре- делённых—Git,Bazaar,Mercurial.Принципы их работы схожи,отличаются они в основном синтаксисом используемых в работе команд.\nСистема контроля версий Git Система контроля версий Git представляет собой набор программ команд- ной строки. Доступ к ним можно получить из терминала посредством ввода команды git с различными опциями.\nБлагодаря тому,что Git является распределённой системой контроля версий, резервную копию локального хранилища можно сделать простым копировани- ем или архивацией.\nОсновные команды git Наиболее часто используемые команды git представлены в таблице нижу\nКоманда Описание git init создание основного дерева репозитория\ngit pull получение обновлений (изменений) текущего дерева из\nцентрального репозитория\ngit push отправка всех произведённых изменений локального\nдерева в центральный репозиторий\ngit status просмотр списка изменённых файлов в текущей\nдиректории\ngit diff просмотр текущих изменения\ngit add . добавить все изменённые и/или созданные файлы и/или\nкаталоги\ngit add добавить конкретные изменённые и/или созданные файлы имена_файлов и/или каталоги\ngit rm удалить файл и/или каталог из индекса репозитория (при имена_файлов этом файл и/или каталог остаётся в локальной директории)\ngit commit сохранить все добавленные изменения и все изменённые -am ‘Описание файлы коммита’\nКоманда Описание git checkout создание новой ветки,базирующейся на текущей -b имя_ветки\ngit checkout переключение на некоторую ветку (при переключении на имя_ветки ветку,которой ещё нет в локальном репозитории,она будет\nсоздана и связана с удалённой)\ngit push отправка изменений конкретной ветки в центральный origin репозиторий\nимя_ветки\ngit merge слияние ветки с текущим деревом –no-ff\nимя_ветки\ngit branch -d удаление локальной уже слитой с основным деревом ветки имя_ветки\ngit branch -D принудительное удаление локальной ветки\nимя_ветки\ngit push удаление ветки с центрального репозитория\norigin\n:имя_ветки Стандартные процедуры работы при наличии центрального репозитория Работа пользователя со своей веткой начинается с проверки и получения изменений из центрального репозитория (при этом в локальное дерево до начала этой процедуры не должно было вноситься изменений): git checkout master\ngit pull\ngit checkout -b имя_ветки\nЗатем можно вносить изменения в локальном дереве и/или ветке.\nПосле завершения внесения какого-то изменения в файлы и/или каталоги проекта необходимо разместить их в центральном репозитории. Для этого необходимо …","date":1679097602,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1679097602,"objectID":"7177a26a2d955dc9275421bed51b249e","permalink":"https://bezura.github.io/ru/post/git_versions_control/","publishdate":"2023-03-18T00:00:02Z","relpermalink":"/ru/post/git_versions_control/","section":"post","summary":"Управление версиями. Git.","tags":["Academic"],"title":"Управление версиями. Git.","type":"post"},{"authors":["Влад Хрусталев"],"categories":["Demo"],"content":"import libr print(\u0026#39;hello\u0026#39;) Начало Неделя прошла довльно обычно. Я на этой неделе, в приципе как всегда, сделал всё дз вовремя. Более нечего рассказать\n","date":1679097600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1679097600,"objectID":"194546b144df3a7ba9bb4e6885abfad4","permalink":"https://bezura.github.io/ru/post/my_last_week_1/","publishdate":"2023-03-18T00:00:00Z","relpermalink":"/ru/post/my_last_week_1/","section":"post","summary":"Добро пожаловать на первый недельный отчёт","tags":["Academic"],"title":"Недельный отчёт.","type":"post"},{"authors":["Влад Хрусталев"],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://bezura.github.io/ru/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An kurs preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://bezura.github.io/ru/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/ru/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Влад Хрусталев","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://bezura.github.io/ru/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An kurs journal article","type":"publication"},{"authors":["Влад Хрусталев","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://bezura.github.io/ru/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An kurs conference paper","type":"publication"}]